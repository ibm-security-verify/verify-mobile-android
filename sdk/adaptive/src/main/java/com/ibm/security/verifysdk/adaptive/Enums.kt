/*
 * Copyright contributors to the IBM Security Verify Adaptive SDK for Android project
 */

package com.ibm.security.verifysdk.adaptive

import java.io.Serializable
import java.util.Locale

/**
 * The assessment response status type.
 *
 * @since 3.0.0
 */
object AssessmentStatusType {
    /** The assessment received a `requires` response that includes an [AllowedFactor] or [EnrolledFactor] instance. This indicates an additional [AdaptiveDelegate.evaluate] step. */
    const val requires: String = "requires"

    /** The assessment received an `allow` response. No further evaluation is needed. */
    const val allow: String = "allow"

    /** The assessment received a `deny` response. This indicates the rejection of the assessment. */
    const val deny: String = "deny"
}

/**
 * A type of factor required to authenticate.
 *
 * Useful for the [AssessmentFactor.type] property.
 *
 * Example usage:
 * ```
 * Factor.PASSWORD // Represents a "password" factor
 * Factor.TOTP // Represents a "totp" factor
 * Factor.EMAIL_OTP // Represents an "emailotp" factor
 * Factor.SMS_OTP // Represents an "smsotp" factor
 * Factor.FIDO // Represents a "fido2" factor
 * Factor.PUSH // Represents a "push" factor
 * Factor.QUESTIONS // Represents a "questions" factor
 * Factor.QR // Represents a "qr" factor
 * Factor.UNKNOWN // Represents an unknown factor (none of the above)
 * ```
 *
 * @since 3.0.0
 */
enum class Factor : Serializable {
    /** Username and password method. */
    PASSWORD,

    /** An agreed seed value between both client and server. */
    TOTP,

    /** A one-time passcode generated by the server and delivered via email. */
    EMAIL_OTP,

    /** A one-time passcode generated by the server and delivered via SMS. */
    SMS_OTP,

    /** Fast Identity On-line (FIDO) method requiring a hardware based token. */
    FIDO,

    /** An out of band authentication method. */
    PUSH,

    /** Knowledge questions verification method. */
    QUESTIONS,

    /** QR login verification method. */
    QR,

    /** An unknown factor was provided. */
    UNKNOWN;

    companion object {
        /**
         * Initializes the [Factor] enum type from a [String].
         *
         * @param value The name of a factor.
         *
         * Example usage:
         * ```
         * val totpFactor = Factor.from("totp") // Returns Factor.TOTP
         * ```
         */
        fun from(value: String): Factor {
            return when (value.lowercase(Locale.ROOT)) {
                "password" -> PASSWORD
                "totp" -> TOTP
                "emailotp" -> EMAIL_OTP
                "smsotp" -> SMS_OTP
                "fido2" -> FIDO
                "push" -> PUSH
                "questions" -> QUESTIONS
                "qr" -> QR
                else -> UNKNOWN
            }
        }
    }
}

/**
 * A type of factor required to authenticate a one-time passcode.
 *
 * Useful for the [OneTimePasscodeEvaluation.type] property.
 *
 * Example usage:
 * ```
 * Factor.TOTP // Represents a "totp" factor
 * Factor.EMAIL_OTP // Represents an "emailotp" factor
 * Factor.SMS_OTP // Represents an "smsotp" factor
 * ```
 *
 * @since 3.0.0
 */
enum class OneTimePasscodeFactor {
    /** An agreed seed value between both client and server. */
    TOTP,

    /** A one-time passcode generated by the server and delivered via email. */
    EMAIL_OTP,

    /** A one-time passcode generated by the server and delivered via SMS. */
    SMS_OTP
}
