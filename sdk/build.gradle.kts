// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    alias(libs.plugins.android.library) apply false
    alias(libs.plugins.android.application) apply false
    alias(libs.plugins.jetbrains.kotlin.android) apply false
    alias(libs.plugins.jetbrains.kotlin.jvm) apply false
    alias(libs.plugins.jetbrains.dokka)
    java
    jacoco
}

// used for release naming and in mfa SDK
extra["versionName"] = "3.0.3"
extra["versionCode"] = "104"

configurations.all {
    resolutionStrategy {
        failOnVersionConflict()
        preferProjectModules()
        force(rootProject.libs.jackson.dataformat.xml) // transitive dependency on woodstox-core:6.2.4
    }
}


/**
 * Custom task customConnectedAndroidTest that depends on running
 * connectedAndroidTest in all modules except the listed ones.
 */
tasks.register("allConnectedAndroidTests") {
    dependsOn(
        subprojects
            .filter { project ->
                !project.name.contains("_demo")
            }
            .flatMap { project ->
                project.tasks.matching { task ->
                    task.name == "connectedAndroidTest"
                }
            }
    )
}

/**
 * Custom task to aggregates coverage data from all relevant subprojects, excluding the sample
 * apps (ending with "_demo"). This task serves as a workaround to circumvent an issue with the
 * JaCoCo tool {@link https://github.com/jacoco/jacoco/issues/939} when generating a consolidated
 * report in a multi-module project.
 *
 * It utilizes the generated reports from each subproject and merges those into the folder
 * structure for the project-wide report that is generated by this tasks.
 */
tasks.register<JacocoReport>("jacocoReport") {

    dependsOn(tasks.named("allConnectedAndroidTests"))
    finalizedBy(tasks.named("mergeJacocoReportFiles"))

    group = "Reporting"
    description = "Generate Jacoco coverage report for the Verify SDK project"

    val fileFilter = listOf(
        "**/R.class",
        "**/R$*.class",
        "**/*\$DefaultConstructorMarker.class",
        "**/BuildConfig.*",
        "**/Manifest*.*",
        "**/databinding/*Binding*.*",
        "**/android/databinding/*Binding*.*",
        "**/androidx/databinding/*Binding*.*",
        "**/*Test*.*",
        "android/**/*.*"
    )

    val javaSourceDirs = files()
    val javaClassDirs = files()

    val kotlinSourceDirs = files()
    val kotlinClassDirs = files()

    val combinedExecutionData = files()

    subprojects.filter { project ->
        !project.name.contains("_demo") // exclude sample apps
    }.forEach { sp ->

        javaSourceDirs.from(fileTree("${sp.projectDir}/src/main/java/") {
            exclude(fileFilter)
        })
        kotlinSourceDirs.from(fileTree("${sp.projectDir}/src/main/kotlin/") {
            exclude(fileFilter)
        })
        javaClassDirs.from(fileTree("${sp.projectDir}/build/intermediates/javac/debug/") {
            exclude(fileFilter)
        })
        kotlinClassDirs.from(fileTree("${sp.projectDir}/build/tmp/kotlin-classes/debug/") {
            exclude(fileFilter)
        })
        combinedExecutionData.from(fileTree("${sp.projectDir}/build/") {
            include("**/*.exec", "**/*.ec")
        })
    }

    classDirectories.setFrom(javaClassDirs, kotlinClassDirs)
    sourceDirectories.setFrom(javaSourceDirs, kotlinSourceDirs)
    executionData.setFrom(combinedExecutionData)

    reports {
        csv.required.set(true)
        xml.required.set(true)
        html.required.set(true)

        html.outputLocation.set(file("$rootDir/build/reports/jacoco/html"))
        xml.outputLocation.set(file("$rootDir/build/reports/jacoco/jacocoReport.xml"))
        csv.outputLocation.set(file("$rootDir/build/reports/jacoco/jacocoReport.csv"))
    }
}

/**
 * Merges all package reports for subprojects in the project-wide Jacoco report.
 */
tasks.register<Copy>("mergeJacocoReportFiles") {

    group = "Reporting"
    description = "Merge all package directories for Jacoco report"

    subprojects.filter { project ->
        (project.name.contains("_demo").or(project.name == "test_utils").not())
    }.forEach { sp ->
        from("${sp.projectDir}/build/reports/coverage/androidTest/debug/connected") {
            include("com*/**")
        }
    }

    into("$rootDir/build/reports/jacoco/html")
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}


subprojects {

    apply {
        plugin("maven-publish")
        plugin("org.jetbrains.dokka")
    }
    val dokkaPlugin by configurations
    dependencies {
        dokkaPlugin(rootProject.libs.versioning.plugin)
    }

    configurations.all {
        resolutionStrategy {
            failOnVersionConflict()
            preferProjectModules()
            force(rootProject.libs.netty.codec.http2) // CVE-2023-44487 in netty-codec-http2-4.1.93.Final
            force(rootProject.libs.jackson.woodstox.core)  // https://mvnrepository.com/artifact/com.fasterxml.woodstox/woodstox-core/6.2.4
        }
    }
}